// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  email     String
  password  String
  workflows Workflow[]
  apiKeys   Credentials[]
}

model Workflow {
  id     String @id @default(uuid())
  User   User   @relation(fields: [userId], references: [id])
  userId String

  title       String
  enabled     Boolean @default(true)
  nodes       Json
  connections Json

  webhook   Webhook? @relation(fields: [webhookId], references: [id])
  webhookId String?  @unique

  executions Execution[]
}

model Webhook {
  id     String  @id @default(uuid())
  title  String
  method Methods @default(GET)
  path   String
  header String
  secret String?

  workflow Workflow?
}

model Credentials {
  id       String   @id @default(uuid())
  title    String
  platform Platform
  data     Json

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Execution {
  id         String     @id @default(uuid())
  workflow   Workflow   @relation(fields: [workflowId], references: [id])
  workflowId String
  status     ExecStatus @default(PENDING)
  tasksDone  Int        @default(0)
  totalTasks Int?
  output     Json?
  logs       Json?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Platform {
  Telegram
  ResendEmail
}

enum Methods {
  GET
  POST
  PUT
  DELETE
}

enum ExecStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}
